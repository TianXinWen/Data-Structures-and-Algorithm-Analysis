#include <stdlib.h>
#include <string.h>
#include "Head.h"

/* typedef char ElementType;
struct Node {
    ElementType Element;
    struct Node *next;
};

typedef struct Node *PtrToNode;
typedef PtrToNode Stack;*/

int Priority(char ch)
{
    if (ch == '(')
        return 3;
    if (ch == ')')
        return 4;
    if (ch == '*' || ch == '/')
        return 1;
    if (ch == '+' || ch == '-')
        return 2;
}

void PostfixExpress(Stack S)
{
    S = MakeStack(S);
    char num[20]; 
    char express[30]; 

    gets(express);
    int j = 0;
    for(int i = 0; express[i]; i++)
    {
        if (express[i] == ' ')
        {
            num[j++] = ' ';
            continue;
        }

        if (express[i] >= 48 && express[i] <= 57)
        {
            num[j++] = express[i];
            continue;
        }
   
        int prior = Priority(express[i]);
        if (IsEmpty(S))
        {
            Push(S, express[i]);  
            continue;
        }

        if (prior == 3)
            Push(S, express[i]);  
             else if (prior == 4)
             {
                while (Priority(Top(S)) != 3)
                {
                    num[j++] = Top(S);
                    Pop(S);
                }
                Pop(S);  
             }
                else if (prior <= Priority(Top(S)))
                    Push(S, express[i]);
                    else
                    {
                        while (!IsEmpty(S))
                        {
                            num[j++] = Top(S);
                            Pop(S);
                            if (Priority(Top(S)) > prior)
                                break;
                        }
                        Push(S, express[i]);
                    }
    }

    while (!IsEmpty(S))
    {
        num[j++] = Top(S);
        Pop(S);
    }
    num[j] = '\0';
    puts(num);
}
